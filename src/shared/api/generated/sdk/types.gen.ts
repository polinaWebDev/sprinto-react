// This file is auto-generated by @hey-api/openapi-ts

export type RegisterDto = {
  email: string
  /**
   * Password must be at least 8 characters long
   */
  password: string
  firstName: string
  lastName: string
}

export type UserResponse = {
  id: number
  email: string
  firstName: string
  lastName: string
}

export type LoginDto = {
  email: string
  /**
   * Password must be at least 8 characters long
   */
  password: string
}

export type UserRequestDto = {
  email: string
  firstName: string
  lastName: string
  password: string
}

export type CreateWorkspaceDto = {
  name: string
}

export type UpdateWorkspaceDto = {
  [key: string]: unknown
}

export type AuthControllerRegisterData = {
  body: RegisterDto
  path?: never
  query?: never
  url: '/auth/register'
}

export type AuthControllerRegisterResponses = {
  200: UserResponse
}

export type AuthControllerRegisterResponse =
  AuthControllerRegisterResponses[keyof AuthControllerRegisterResponses]

export type AuthControllerLoginData = {
  body: LoginDto
  path?: never
  query?: never
  url: '/auth/login'
}

export type AuthControllerLoginResponses = {
  200: UserResponse
}

export type AuthControllerLoginResponse =
  AuthControllerLoginResponses[keyof AuthControllerLoginResponses]

export type AuthControllerOauthLoginData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/oauth'
}

export type AuthControllerOauthLoginResponses = {
  200: unknown
}

export type AuthControllerOauthCallbackData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/google/redirect'
}

export type AuthControllerOauthCallbackResponses = {
  200: UserResponse
}

export type AuthControllerOauthCallbackResponse =
  AuthControllerOauthCallbackResponses[keyof AuthControllerOauthCallbackResponses]

export type AuthControllerGetMeData = {
  body?: never
  path?: never
  query?: never
  url: '/auth/me'
}

export type AuthControllerGetMeResponses = {
  /**
   * Successful get user
   */
  200: UserResponse
}

export type AuthControllerGetMeResponse =
  AuthControllerGetMeResponses[keyof AuthControllerGetMeResponses]

export type UsersControllerFindAllData = {
  body?: never
  path?: never
  query?: never
  url: '/users'
}

export type UsersControllerFindAllResponses = {
  200: unknown
}

export type UsersControllerCreateData = {
  body: UserRequestDto
  path?: never
  query?: never
  url: '/users'
}

export type UsersControllerCreateResponses = {
  201: unknown
}

export type UsersControllerRemoveData = {
  body?: never
  path: {
    id: number
  }
  query?: never
  url: '/users/{id}'
}

export type UsersControllerRemoveResponses = {
  200: unknown
}

export type UsersControllerFindOneData = {
  body?: never
  path: {
    id: number
  }
  query?: never
  url: '/users/{id}'
}

export type UsersControllerFindOneResponses = {
  200: unknown
}

export type UsersControllerUpdateData = {
  body: UserRequestDto
  path: {
    id: number
  }
  query?: never
  url: '/users/{id}'
}

export type UsersControllerUpdateResponses = {
  200: unknown
}

export type WorkspaceControllerFindAllData = {
  body?: never
  path?: never
  query?: never
  url: '/workspace'
}

export type WorkspaceControllerFindAllResponses = {
  200: unknown
}

export type WorkspaceControllerCreateData = {
  body: CreateWorkspaceDto
  path?: never
  query?: never
  url: '/workspace'
}

export type WorkspaceControllerCreateResponses = {
  /**
   * Workspace created successfully
   */
  200: unknown
}

export type WorkspaceControllerRemoveData = {
  body?: never
  path: {
    /**
     * ID workspace
     */
    id: number
  }
  query?: never
  url: '/workspace/{id}'
}

export type WorkspaceControllerRemoveResponses = {
  200: unknown
}

export type WorkspaceControllerFindOneData = {
  body?: never
  path: {
    /**
     * ID workspace
     */
    id: number
  }
  query?: never
  url: '/workspace/{id}'
}

export type WorkspaceControllerFindOneResponses = {
  200: unknown
}

export type WorkspaceControllerUpdateData = {
  body: UpdateWorkspaceDto
  path: {
    /**
     * ID workspace
     */
    id: number
  }
  query?: never
  url: '/workspace/{id}'
}

export type WorkspaceControllerUpdateResponses = {
  200: unknown
}

export type ClientOptions = {
  baseUrl: 'http://localhost:3000' | (string & {})
}
