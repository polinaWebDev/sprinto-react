// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  authControllerRegister,
  authControllerLogin,
  authControllerOauthLogin,
  authControllerOauthCallback,
  authControllerGetMe,
  usersControllerFindAll,
  usersControllerCreate,
  usersControllerRemove,
  usersControllerFindOne,
  usersControllerUpdate,
  workspaceControllerFindAll,
  workspaceControllerCreate,
  workspaceControllerRemove,
  workspaceControllerFindOne,
  workspaceControllerUpdate,
} from '../sdk.gen.ts'
import {
  type UseMutationOptions,
  type DefaultError,
  queryOptions,
} from '@tanstack/react-query'
import type {
  AuthControllerRegisterData,
  AuthControllerRegisterResponse,
  AuthControllerLoginData,
  AuthControllerLoginResponse,
  AuthControllerOauthLoginData,
  AuthControllerOauthCallbackData,
  AuthControllerGetMeData,
  UsersControllerFindAllData,
  UsersControllerCreateData,
  UsersControllerRemoveData,
  UsersControllerFindOneData,
  UsersControllerUpdateData,
  WorkspaceControllerFindAllData,
  WorkspaceControllerCreateData,
  WorkspaceControllerRemoveData,
  WorkspaceControllerFindOneData,
  WorkspaceControllerUpdateData,
} from '../types.gen.ts'
import { client as _heyApiClient } from '../client.gen.ts'

export const authControllerRegisterMutation = (
  options?: Partial<Options<AuthControllerRegisterData>>,
): UseMutationOptions<
  AuthControllerRegisterResponse,
  DefaultError,
  Options<AuthControllerRegisterData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthControllerRegisterResponse,
    DefaultError,
    Options<AuthControllerRegisterData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await authControllerRegister({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const authControllerLoginMutation = (
  options?: Partial<Options<AuthControllerLoginData>>,
): UseMutationOptions<
  AuthControllerLoginResponse,
  DefaultError,
  Options<AuthControllerLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthControllerLoginResponse,
    DefaultError,
    Options<AuthControllerLoginData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await authControllerLogin({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
    tags?: ReadonlyArray<string>
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (tags) {
    params.tags = tags
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const authControllerOauthLoginQueryKey = (
  options?: Options<AuthControllerOauthLoginData>,
) => createQueryKey('authControllerOauthLogin', options)

export const authControllerOauthLoginOptions = (
  options?: Options<AuthControllerOauthLoginData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authControllerOauthLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: authControllerOauthLoginQueryKey(options),
  })
}

export const authControllerOauthCallbackQueryKey = (
  options?: Options<AuthControllerOauthCallbackData>,
) => createQueryKey('authControllerOauthCallback', options)

export const authControllerOauthCallbackOptions = (
  options?: Options<AuthControllerOauthCallbackData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authControllerOauthCallback({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: authControllerOauthCallbackQueryKey(options),
  })
}

export const authControllerGetMeQueryKey = (
  options?: Options<AuthControllerGetMeData>,
) => createQueryKey('authControllerGetMe', options)

export const authControllerGetMeOptions = (
  options?: Options<AuthControllerGetMeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authControllerGetMe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: authControllerGetMeQueryKey(options),
  })
}

export const usersControllerFindAllQueryKey = (
  options?: Options<UsersControllerFindAllData>,
) => createQueryKey('usersControllerFindAll', options)

export const usersControllerFindAllOptions = (
  options?: Options<UsersControllerFindAllData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersControllerFindAll({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersControllerFindAllQueryKey(options),
  })
}

export const usersControllerCreateMutation = (
  options?: Partial<Options<UsersControllerCreateData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<UsersControllerCreateData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<UsersControllerCreateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await usersControllerCreate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersControllerRemoveMutation = (
  options?: Partial<Options<UsersControllerRemoveData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<UsersControllerRemoveData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<UsersControllerRemoveData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await usersControllerRemove({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const usersControllerFindOneQueryKey = (
  options: Options<UsersControllerFindOneData>,
) => createQueryKey('usersControllerFindOne', options)

export const usersControllerFindOneOptions = (
  options: Options<UsersControllerFindOneData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await usersControllerFindOne({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: usersControllerFindOneQueryKey(options),
  })
}

export const usersControllerUpdateMutation = (
  options?: Partial<Options<UsersControllerUpdateData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<UsersControllerUpdateData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<UsersControllerUpdateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await usersControllerUpdate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const workspaceControllerFindAllQueryKey = (
  options?: Options<WorkspaceControllerFindAllData>,
) => createQueryKey('workspaceControllerFindAll', options)

export const workspaceControllerFindAllOptions = (
  options?: Options<WorkspaceControllerFindAllData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workspaceControllerFindAll({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: workspaceControllerFindAllQueryKey(options),
  })
}

export const workspaceControllerCreateMutation = (
  options?: Partial<Options<WorkspaceControllerCreateData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<WorkspaceControllerCreateData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<WorkspaceControllerCreateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await workspaceControllerCreate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const workspaceControllerRemoveMutation = (
  options?: Partial<Options<WorkspaceControllerRemoveData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<WorkspaceControllerRemoveData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<WorkspaceControllerRemoveData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await workspaceControllerRemove({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const workspaceControllerFindOneQueryKey = (
  options: Options<WorkspaceControllerFindOneData>,
) => createQueryKey('workspaceControllerFindOne', options)

export const workspaceControllerFindOneOptions = (
  options: Options<WorkspaceControllerFindOneData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await workspaceControllerFindOne({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: workspaceControllerFindOneQueryKey(options),
  })
}

export const workspaceControllerUpdateMutation = (
  options?: Partial<Options<WorkspaceControllerUpdateData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<WorkspaceControllerUpdateData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<WorkspaceControllerUpdateData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await workspaceControllerUpdate({
        ...options,
        ...fnOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}
