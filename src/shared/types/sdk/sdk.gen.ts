// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client'
import type {
  AuthControllerRegisterData,
  AuthControllerRegisterResponses,
  AuthControllerLoginData,
  AuthControllerLoginResponses,
  AuthControllerOauthLoginData,
  AuthControllerOauthLoginResponses,
  AuthControllerOauthCallbackData,
  AuthControllerOauthCallbackResponses,
  AuthControllerGetMeData,
  AuthControllerGetMeResponses,
  UsersControllerFindAllData,
  UsersControllerFindAllResponses,
  UsersControllerCreateData,
  UsersControllerCreateResponses,
  UsersControllerRemoveData,
  UsersControllerRemoveResponses,
  UsersControllerFindOneData,
  UsersControllerFindOneResponses,
  UsersControllerUpdateData,
  UsersControllerUpdateResponses,
} from './types.gen'
import { client as _heyApiClient } from './client.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

export const authControllerRegister = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerRegisterData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthControllerRegisterResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const authControllerLogin = <ThrowOnError extends boolean = false>(
  options: Options<AuthControllerLoginData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthControllerLoginResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const authControllerOauthLogin = <ThrowOnError extends boolean = false>(
  options?: Options<AuthControllerOauthLoginData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthControllerOauthLoginResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/oauth',
    ...options,
  })
}

export const authControllerOauthCallback = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<AuthControllerOauthCallbackData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthControllerOauthCallbackResponses,
    unknown,
    ThrowOnError
  >({
    url: '/auth/google/redirect',
    ...options,
  })
}

export const authControllerGetMe = <ThrowOnError extends boolean = false>(
  options?: Options<AuthControllerGetMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthControllerGetMeResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        in: 'cookie',
        name: 'refreshToken',
        type: 'apiKey',
      },
    ],
    url: '/auth/me',
    ...options,
  })
}

export const usersControllerFindAll = <ThrowOnError extends boolean = false>(
  options?: Options<UsersControllerFindAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UsersControllerFindAllResponses,
    unknown,
    ThrowOnError
  >({
    url: '/users',
    ...options,
  })
}

export const usersControllerCreate = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UsersControllerCreateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

export const usersControllerRemove = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerRemoveData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UsersControllerRemoveResponses,
    unknown,
    ThrowOnError
  >({
    url: '/users/{id}',
    ...options,
  })
}

export const usersControllerFindOne = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerFindOneData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    UsersControllerFindOneResponses,
    unknown,
    ThrowOnError
  >({
    url: '/users/{id}',
    ...options,
  })
}

export const usersControllerUpdate = <ThrowOnError extends boolean = false>(
  options: Options<UsersControllerUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersControllerUpdateResponses,
    unknown,
    ThrowOnError
  >({
    url: '/users/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}
