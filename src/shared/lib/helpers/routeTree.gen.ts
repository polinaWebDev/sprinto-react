/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from '../../../app/routes/__root.tsx'
import { Route as DashboardRouteImport } from '../../../app/routes/dashboard.tsx'
import { Route as IndexRouteImport } from '../../../app/routes'
import { Route as AuthLayoutRouteImport } from '../../../app/routes/auth/_layout.tsx'
import { Route as AuthLayoutRegisterRouteImport } from '../../../app/routes/auth/_layout/register.tsx'
import { Route as AuthLayoutLoginRouteImport } from '../../../app/routes/auth/_layout/login.tsx'

const AuthRouteImport = createFileRoute('/auth')()

const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLayoutRoute = AuthLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLayoutRegisterRoute = AuthLayoutRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthLayoutRoute,
} as any)
const AuthLayoutLoginRoute = AuthLayoutLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/auth': typeof AuthLayoutRouteWithChildren
  '/auth/login': typeof AuthLayoutLoginRoute
  '/auth/register': typeof AuthLayoutRegisterRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/auth': typeof AuthLayoutRouteWithChildren
  '/auth/login': typeof AuthLayoutLoginRoute
  '/auth/register': typeof AuthLayoutRegisterRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/auth': typeof AuthRouteWithChildren
  '/auth/_layout': typeof AuthLayoutRouteWithChildren
  '/auth/_layout/login': typeof AuthLayoutLoginRoute
  '/auth/_layout/register': typeof AuthLayoutRegisterRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dashboard' | '/auth' | '/auth/login' | '/auth/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/auth' | '/auth/login' | '/auth/register'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/auth'
    | '/auth/_layout'
    | '/auth/_layout/login'
    | '/auth/_layout/register'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/_layout': {
      id: '/auth/_layout'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthLayoutRouteImport
      parentRoute: typeof AuthRoute
    }
    '/auth/_layout/register': {
      id: '/auth/_layout/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthLayoutRegisterRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
    '/auth/_layout/login': {
      id: '/auth/_layout/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLayoutLoginRouteImport
      parentRoute: typeof AuthLayoutRoute
    }
  }
}

interface AuthLayoutRouteChildren {
  AuthLayoutLoginRoute: typeof AuthLayoutLoginRoute
  AuthLayoutRegisterRoute: typeof AuthLayoutRegisterRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLayoutLoginRoute: AuthLayoutLoginRoute,
  AuthLayoutRegisterRoute: AuthLayoutRegisterRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

interface AuthRouteChildren {
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
